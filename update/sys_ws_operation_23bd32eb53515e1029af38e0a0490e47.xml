<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>GET</http_method>
        <name>Get NI recs by query filter  (v3)</name>
        <operation_script><![CDATA[(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    // implement resource here
    var answer = [];

    var assigned_to = request.queryParams.assigned_to; //user_name
  
    //get the assign_to user record
    if (assigned_to) {
        var grUser = new GlideRecord("sys_user");
        var userExist = grUser.get('user_name', assigned_to.toString());
    
        if (!userExist) {
            response.setError(new sn_ws_err.NotFoundError('Provided user does not exist'));
            response.setStatus(404);
            return;
        }
    }


    var priority = request.queryParams.priority; //value already
    var state = request.queryParams.state; //value already

    if (!assigned_to && !priority && !state) {
        response.setError(new sn_ws_err.NotFoundError("No query parameters defines"));
        response.setStatus(404);
        return;
    }

    var niGr = new GlideRecord("x_58872_needit_needit");
    if (priority) {
        niGr.addQuery('priority', priority);
    }
    if (state) {
		niGr.addEncodedQuery("stateIN" + state);
    }
    if (userExist) {
        niGr.addQuery('assigned_to', grUser.sys_id);
    }

    niGr.query();

    while (niGr.next()) {
        var niObj = {
            "Number": niGr.number,
            "Requested for": niGr.u_requested_for.getDisplayValue(),
            "Short description:": niGr.short_description,
            "Assign to": niGr.assigned_to.getDisplayValue(),
            "Status": niGr.state.getDisplayValue(),
            "Priority": niGr.priority.getDisplayValue()
        };

        answer.push(niObj);
    } 

	if(answer.length > 0)
    response.setBody(answer);
	else{
		response.setBody({"msg": "no records exist for that filter"});
	}



})(request, response);]]></operation_script>
        <operation_uri>/api/x_58872_needit/v3/needit_api/filtered_ni_recs</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/filtered_ni_recs</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-23 14:45:03</sys_created_on>
        <sys_id>23bd32eb53515e1029af38e0a0490e47</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Get NI recs by query filter  (v3)</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ws_operation_23bd32eb53515e1029af38e0a0490e47</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-23 14:45:03</sys_updated_on>
        <web_service_definition display_value="NeedIt API">da7208c353d95a1029af38e0a0490e0e</web_service_definition>
        <web_service_version display_value="v3">2bbdf2e753515e1029af38e0a0490eef</web_service_version>
    </sys_ws_operation>
</record_update>
